
Here I have tried to create a Duck Simulator app using basic design principles

We have a superclass Duck and there are several duck subclasses. But not all subclasses want to inherit exact features of Duck Superclass

Like some ducks can fly and some ducks cant fly. So we have two different implementations of fly()

I have identified the aspects of the application that varies and have separated them from what stays the same

So now fly and quack behavior are not a part of Duck superclass. Instead they exist as independent interfaces.

This is the implementation of Strategy Design Pattern that lets the algorithm vary independently from clients that use it.